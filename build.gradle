buildscript {
    project.ext.CERN_VM = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: false
    project.ext.DEPLOYMENT = System.getProperty('deployment') ?: false
    project.ext.VCS_TAG = System.getProperty('TRAVIS_TAG') ?: System.getenv('TRAVIS_TAG')
    project.ext.POM = [
        groupId    : 'jmad',
        artifactId : 'jmad-modelpack-service',
        description: 'Service to retrieve JMad model packages from different sources.'
    ]
    project.ext.INFO = [
        repo            : 'https://github.com/jmad/jmad-modelpack-service.git',
        url             : 'https://jmad.github.io/',
        github          : 'https://github.com/jmad/jmad-modelpack-service',
        githubIssues    : 'https://github.com/jmad/jmad-modelpack-service/issues',
        licenseNameShort: 'Apache-2.0',
        licenseName     : 'The Apache License, Version 2.0',
        licenseUrl      : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    ]
    project.ext.BINTRAY = [
        repo        : 'jmad-repo',
        name        : 'jmad-modelpack-service',
        organization: 'jmad',
        userName    : System.getProperty('BINTRAY_USER') ?: System.getenv('BINTRAY_USER'),
        apiToken    : System.getProperty('BINTRAY_API_TOKEN') ?: System.getenv('BINTRAY_API_TOKEN')
    ]

    repositories {
        if (CERN_VM) {
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
        } else {
            jcenter()
        }
    }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3' }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'


group 'jmad'

sourceCompatibility = JavaVersion.VERSION_1_8

if (DEPLOYMENT) {
    println 'Applying deployment scripts'
    apply from: './scripts/bintray-deploy.gradle'
}

repositories {
    if (CERN_VM) {
        maven { url 'http://artifactory.cern.ch/ds-jcenter' }
        maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
        maven { url "https://dl.bintray.com/jmad/jmad-repo" }
    }
}

dependencies {
    compile group: 'jmad', name: 'jmad-core', version: '0.1.2'

    compile group: 'org.springframework', name: 'spring-core', version: '5.0.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version: '5.0.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version: '5.0.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version: '5.0.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '5.0.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-webflux', version: '5.0.6.RELEASE'
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.0.1.RELEASE') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.4'

    compile group: 'io.projectreactor', name: 'reactor-core', version: '3.1.7.RELEASE'
    compile group: 'io.projectreactor', name: 'reactor-test', version: '3.1.7.RELEASE'
    compile group: 'io.projectreactor.ipc', name: 'reactor-netty', version: '0.7.7.RELEASE'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    testCompile group: 'org.springframework', name: 'spring-test', version: '5.0.6.RELEASE'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.18.3'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
}

task wrapper(type: Wrapper) { gradleVersion = '4.7' }

sourceSets {
    main {
        java { srcDirs = ['src/java']}
        resources { srcDirs = ['src/java']}
    }

    test {
        java { srcDirs = ['src/test']}
        resources { srcDirs = ['src/test']}
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

javadoc { options.encoding = "UTF-8" }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
